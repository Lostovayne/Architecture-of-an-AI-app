// Script de prueba para la API h√≠brida
const API_BASE = 'http://localhost:3000/api';

// üîÑ Test 1: Chat Simple (sin herramientas)
async function testSimpleChat() {
   console.log('\nü§ñ TESTING: Chat Simple');

   const response = await fetch(`${API_BASE}/chat`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
         prompt: 'Hola, cu√©ntame un chiste corto',
         conversationId: '550e8400-e29b-41d4-a716-446655440000',
         modelType: 'simple',
         taskType: 'chat',
         useMemory: false,
         useKnowledgeBase: false,
      }),
   });

   const data = await response.json();
   console.log('‚úÖ Respuesta:', data);
   return data;
}

// üß† Test 2: Chat con Memoria
async function testMemoryChat() {
   console.log('\nüß† TESTING: Chat con Memoria');

   // Primera interacci√≥n
   await fetch(`${API_BASE}/chat`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
         prompt: 'Mi nombre es Carlos y me gusta el caf√©',
         conversationId: '550e8400-e29b-41d4-a716-446655440001',
         modelType: 'memory',
         useMemory: true,
      }),
   });

   // Segunda interacci√≥n pidiendo memoria
   const response2 = await fetch(`${API_BASE}/chat`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
         prompt: '¬øRecuerdas c√≥mo me llamo y qu√© me gusta?',
         conversationId: '550e8400-e29b-41d4-a716-446655440001',
         modelType: 'memory',
         useMemory: true,
      }),
   });

   const data = await response2.json();
   console.log('‚úÖ Respuesta con memoria:', data);
   return data;
}

// üîß Test 3: Chat con Herramientas Completas
async function testToolsChat() {
   console.log('\nüîß TESTING: Chat con Herramientas');

   const response = await fetch(`${API_BASE}/chat`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
         prompt:
            'Aprende esto: Vue.js es un framework progresivo de JavaScript para construir interfaces de usuario',
         conversationId: '550e8400-e29b-41d4-a716-446655440002',
         modelType: 'with_tools',
         useMemory: true,
         useKnowledgeBase: true,
      }),
   });

   const data = await response.json();
   console.log('‚úÖ Respuesta con herramientas:', data);
   return data;
}

// üöÄ Ejecutar todas las pruebas
async function runAllTests() {
   console.log('üöÄ INICIANDO TESTS DE API H√çBRIDA\n');

   try {
      await testSimpleChat();
      await new Promise((resolve) => setTimeout(resolve, 2000)); // Esperar 2s

      await testMemoryChat();
      await new Promise((resolve) => setTimeout(resolve, 2000)); // Esperar 2s

      await testToolsChat();

      console.log('\n‚úÖ TODOS LOS TESTS COMPLETADOS');
   } catch (error) {
      console.error('‚ùå ERROR en tests:', error);
   }
}

// Si ejecutas este archivo directamente
if (typeof window === 'undefined') {
   runAllTests();
}

export { testSimpleChat, testMemoryChat, testToolsChat, runAllTests };
